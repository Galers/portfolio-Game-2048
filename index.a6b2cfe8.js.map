{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $a5fd07fa01589658$var$GRID_SIZE = 4;\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    constructor(){\n        this.board = this.getState();\n        this.score = 0;\n        this.gameActive = false;\n        this.cells = document.querySelectorAll(\".field-cell\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.assignDataAttributes();\n    }\n    assignDataAttributes() {\n        this.cells.forEach((cell, index)=>{\n            const row = Math.floor(index / $a5fd07fa01589658$var$GRID_SIZE);\n            const col = index % $a5fd07fa01589658$var$GRID_SIZE;\n            cell.dataset.row = row;\n            cell.dataset.col = col;\n        });\n    }\n    moveUp() {\n        if (!this.gameActive) return;\n        let changed = false;\n        for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++)if (this.moveColumnUp(col)) changed = true;\n        if (changed) {\n            this.getRandomTile();\n            this.addCell();\n        }\n        this.checkGameStatus();\n    }\n    moveDown() {\n        if (!this.gameActive) return;\n        let changed = false;\n        for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++)if (this.moveColumnDown(col)) changed = true;\n        if (changed) {\n            this.getRandomTile();\n            this.addCell();\n        }\n        this.checkGameStatus();\n    }\n    moveLeft() {\n        if (!this.gameActive) return;\n        let changed = false;\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++)if (this.moveColumnLeft(row)) changed = true;\n        if (changed) {\n            this.getRandomTile();\n            this.addCell();\n        }\n        this.checkGameStatus();\n    }\n    moveRight() {\n        if (!this.gameActive) return;\n        let changed = false;\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++)if (this.moveColumnRight(row)) changed = true;\n        if (changed) {\n            this.getRandomTile();\n            this.addCell();\n        }\n        this.checkGameStatus();\n    }\n    getScore() {\n        return this.board.flat().reduce((acc, value)=>acc + value, 0);\n    }\n    getState() {\n        return [\n            ...Array($a5fd07fa01589658$var$GRID_SIZE)\n        ].map(()=>Array($a5fd07fa01589658$var$GRID_SIZE).fill(0));\n    }\n    getRandomTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++){\n            for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++)if (this.board[row][col] === 0) emptyTiles.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyTiles.length) {\n            const { row: row, col: col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n            this.animateNewTile(row, col);\n            return {\n                row: row,\n                col: col,\n                value: this.board[row][col]\n            };\n        }\n        return null;\n    }\n    checkWin() {\n        return this.board.flat().includes(2048);\n    }\n    checkLose() {\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++)for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++){\n            if (this.board[row][col] === 0) return false;\n            const checkCol = col < $a5fd07fa01589658$var$GRID_SIZE - 1 && this.board[row][col] === this.board[row][col + 1];\n            const checkRow = row < $a5fd07fa01589658$var$GRID_SIZE - 1 && this.board[row][col] === this.board[row + 1][col];\n            if (checkCol || checkRow) return false;\n        }\n        return true;\n    }\n    getStatus() {\n        if (this.checkWin()) return \"win\";\n        if (this.checkLose()) return \"lose\";\n        return `playing`;\n    }\n    checkGameStatus() {\n        const gameStatus = this.getStatus();\n        if (gameStatus === \"win\") {\n            this.messageWin.classList.remove(\"hidden\");\n            this.showWinMessage();\n            this.showConfetti();\n        } else if (gameStatus === \"lose\") {\n            this.messageLose.classList.remove(\"hidden\");\n            this.showGameOverMessage();\n        }\n    }\n    addCell() {\n        this.cells.forEach((cell, index)=>{\n            const row = Math.floor(index / $a5fd07fa01589658$var$GRID_SIZE);\n            const col = index % $a5fd07fa01589658$var$GRID_SIZE;\n            const value = this.board[row][col];\n            const hasValue = value ? ` field-cell--${value}` : \"\";\n            cell.className = \"field-cell\" + hasValue;\n            cell.textContent = value || \"\";\n            this.animateAppear(row, col);\n        });\n    }\n    deleteCell() {\n        this.cells.forEach((cell)=>{\n            cell.className = \"field-cell\";\n            cell.textContent = \"\";\n        });\n    }\n    start(element) {\n        this.gameActive = true;\n        this.score = 0;\n        element.classList.replace(\"start\", \"restart\");\n        element.textContent = \"Restart\";\n        this.getRandomTile();\n        this.getRandomTile();\n        this.addCell();\n        this.assignDataAttributes();\n    }\n    restart(element) {\n        this.gameActive = false;\n        this.score = 0;\n        const hasHiddenLose = this.messageLose.classList.contains(\"hidden\");\n        const hasHiddenWin = this.messageWin.classList.contains(\"hidden\");\n        if (!hasHiddenLose) this.messageLose.classList.add(\"hidden\");\n        if (!hasHiddenWin) this.messageWin.classList.add(\"hidden\");\n        element.classList.replace(\"restart\", \"start\");\n        element.textContent = \"Start\";\n        this.board = this.getState();\n        this.deleteCell();\n        this.assignDataAttributes();\n    }\n    moveColumnUp(col) {\n        let changed = false;\n        const compressedColumn = this.board.map((row)=>row[col]).filter((value)=>value !== 0);\n        for(let i = 0; i < compressedColumn.length - 1; i++)if (compressedColumn[i] === compressedColumn[i + 1]) {\n            compressedColumn[i] *= 2;\n            compressedColumn.splice(i + 1, 1);\n            this.score += compressedColumn[i];\n            this.animateMerge(i, col);\n            changed = true;\n        }\n        while(compressedColumn.length < $a5fd07fa01589658$var$GRID_SIZE)compressedColumn.push(0);\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++){\n            if (this.board[row][col] !== compressedColumn[row]) changed = true;\n            this.board[row][col] = compressedColumn[row];\n            this.animateMove(row, col);\n        }\n        return changed;\n    }\n    moveColumnDown(col) {\n        let changed = false;\n        const compressedColumn = this.board.map((row)=>row[col]).filter((value)=>value !== 0);\n        for(let i = compressedColumn.length - 1; i > 0; i--)if (compressedColumn[i] === compressedColumn[i - 1]) {\n            compressedColumn[i] *= 2;\n            compressedColumn.splice(i - 1, 1);\n            this.score += compressedColumn[i];\n            this.animateMerge(i, col);\n            changed = true;\n        }\n        while(compressedColumn.length < $a5fd07fa01589658$var$GRID_SIZE)compressedColumn.unshift(0);\n        for(let row = 0; row < $a5fd07fa01589658$var$GRID_SIZE; row++){\n            if (this.board[row][col] !== compressedColumn[row]) changed = true;\n            this.board[row][col] = compressedColumn[row];\n            this.animateMove(row, col);\n        }\n        return changed;\n    }\n    moveColumnLeft(row) {\n        let changed = false;\n        const compressedRow = this.board[row].filter((value)=>value !== 0);\n        for(let i = 0; i < compressedRow.length - 1; i++)if (compressedRow[i] === compressedRow[i + 1]) {\n            compressedRow[i] *= 2;\n            compressedRow.splice(i + 1, 1);\n            this.score += compressedRow[i];\n            this.animateMerge(row, i);\n            changed = true;\n        }\n        while(compressedRow.length < $a5fd07fa01589658$var$GRID_SIZE)compressedRow.push(0);\n        if (this.board[row].some((value, index)=>value !== compressedRow[index])) changed = true;\n        this.board[row] = compressedRow;\n        for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++)this.animateMove(row, col);\n        return changed;\n    }\n    moveColumnRight(row) {\n        let changed = false;\n        const compressedRow = this.board[row].filter((value)=>value !== 0);\n        for(let i = compressedRow.length - 1; i > 0; i--)if (compressedRow[i] === compressedRow[i - 1]) {\n            compressedRow[i] *= 2;\n            compressedRow.splice(i - 1, 1);\n            this.score += compressedRow[i];\n            this.animateMerge(row, i);\n            changed = true;\n        }\n        while(compressedRow.length < $a5fd07fa01589658$var$GRID_SIZE)compressedRow.unshift(0);\n        if (this.board[row].some((value, index)=>value !== compressedRow[index])) changed = true;\n        this.board[row] = compressedRow;\n        for(let col = 0; col < $a5fd07fa01589658$var$GRID_SIZE; col++)this.animateMove(row, col);\n        return changed;\n    }\n    animateNewTile(row, col) {\n        const cell = document.querySelector(`.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\n        if (cell) {\n            cell.classList.add(\"field-cell--new\");\n            setTimeout(()=>{\n                cell.classList.remove(\"field-cell--new\");\n            }, 300);\n        }\n    }\n    animateAppear(row, col) {\n        const cell = document.querySelector(`.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\n        if (cell) {\n            cell.classList.add(\"field-cell--appear\");\n            setTimeout(()=>{\n                cell.classList.remove(\"field-cell--appear\");\n            }, 200);\n        }\n    }\n    animateMerge(row, col) {\n        const cell = document.querySelector(`.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\n        if (cell) {\n            cell.classList.add(\"field-cell--merge\");\n            setTimeout(()=>{\n                cell.classList.remove(\"field-cell--merge\");\n            }, 300);\n        }\n    }\n    animateMove(row, col) {\n        const cell = document.querySelector(`.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\n        if (cell) {\n            cell.classList.add(\"field-cell--move\");\n            setTimeout(()=>{\n                cell.classList.remove(\"field-cell--move\");\n            }, 300);\n        }\n    }\n    showGameOverMessage() {\n        const gameOverOverlay = document.querySelector(\".game-over-overlay\");\n        gameOverOverlay.classList.remove(\"hidden\");\n        setTimeout(()=>{\n            gameOverOverlay.classList.add(\"show\");\n        }, 10);\n        setTimeout(()=>{\n            gameOverOverlay.classList.remove(\"show\");\n            setTimeout(()=>{\n                gameOverOverlay.classList.add(\"hidden\");\n            }, 1000);\n        }, 3000);\n    }\n    showWinMessage() {\n        const winOverlay = document.querySelector(\".win-overlay\");\n        winOverlay.classList.remove(\"hidden\");\n        setTimeout(()=>{\n            winOverlay.classList.add(\"show\");\n        }, 10);\n        setTimeout(()=>{\n            winOverlay.classList.remove(\"show\");\n            setTimeout(()=>{\n                winOverlay.classList.add(\"hidden\");\n            }, 1000);\n        }, 3000);\n    }\n    createConfetti = ()=>{\n        const confettiContainer = document.querySelector(\".confetti-container\");\n        const confetti = document.createElement(\"div\");\n        confetti.classList.add(\"confetti\");\n        confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;\n        confetti.style.left = `${Math.random() * 100}vw`;\n        confetti.style.animationDelay = `${Math.random()}s`;\n        confetti.style.animationDuration = `${Math.random() * 2 + 3}s`;\n        confettiContainer.appendChild(confetti);\n        setTimeout(()=>{\n            confetti.remove();\n        }, 5000);\n    };\n    showConfetti() {\n        for(let i = 0; i < 100; i++)this.createConfetti();\n    }\n}\n\n\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const MESSAGE_RESTART = \"Are you sure you want to start a new game? All progress will be lost.\";\n    const game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\n    const gameStart = document.querySelector(\".button\");\n    const score = document.querySelector(\".game-score\");\n    const messageStart = document.querySelector(\".message-start\");\n    const checkStatus = ()=>{\n        const hasStart = gameStart.classList.contains(\"start\");\n        if (hasStart) {\n            game.start(gameStart);\n            messageStart.classList.add(\"hidden\");\n        } else {\n            if (confirm(MESSAGE_RESTART)) {\n                game.restart(gameStart);\n                game.start(gameStart);\n            } else return;\n        }\n        setUpScore();\n        setUpInputOnce();\n    };\n    const setUpInputOnce = ()=>window.addEventListener(\"keydown\", handleInput, {\n            once: true\n        });\n    const setUpScore = ()=>{\n        score.textContent = game.getScore();\n    };\n    const handleInput = (event)=>{\n        switch(event.key){\n            case \"ArrowUp\":\n                game.moveUp();\n                break;\n            case \"ArrowDown\":\n                game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                game.moveRight();\n                break;\n            default:\n                setUpInputOnce();\n                return;\n        }\n        setUpScore();\n        setUpInputOnce();\n    };\n    setUpInputOnce();\n    gameStart.addEventListener(\"click\", checkStatus);\n});\n\n\n//# sourceMappingURL=index.a6b2cfe8.js.map\n","\"use strict\";\n\nimport Game from \"../modules/Game.class\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const MESSAGE_RESTART =\n    \"Are you sure you want to start a new game? All progress will be lost.\";\n\n  const game = new Game();\n  const gameStart = document.querySelector(\".button\");\n  const score = document.querySelector(\".game-score\");\n  const messageStart = document.querySelector(\".message-start\");\n\n  const checkStatus = () => {\n    const hasStart = gameStart.classList.contains(\"start\");\n\n    if (hasStart) {\n      game.start(gameStart);\n      messageStart.classList.add(\"hidden\");\n    } else {\n      if (confirm(MESSAGE_RESTART)) {\n        game.restart(gameStart);\n        game.start(gameStart);\n      } else {\n        return;\n      }\n    }\n\n    setUpScore();\n    setUpInputOnce();\n  };\n\n  const setUpInputOnce = () =>\n    window.addEventListener(\"keydown\", handleInput, { once: true });\n\n  const setUpScore = () => {\n    score.textContent = game.getScore();\n  };\n\n  const handleInput = (event) => {\n    switch (event.key) {\n      case \"ArrowUp\":\n        game.moveUp();\n        break;\n      case \"ArrowDown\":\n        game.moveDown();\n        break;\n      case \"ArrowLeft\":\n        game.moveLeft();\n        break;\n      case \"ArrowRight\":\n        game.moveRight();\n        break;\n      default:\n        setUpInputOnce();\n\n        return;\n    }\n\n    setUpScore();\n    setUpInputOnce();\n  };\n\n  setUpInputOnce();\n\n  gameStart.addEventListener(\"click\", checkStatus);\n});\n","\"use strict\";\n\nconst GRID_SIZE = 4;\n\nexport default class Game {\n  constructor() {\n    this.board = this.getState();\n\n    this.score = 0;\n    this.gameActive = false;\n    this.cells = document.querySelectorAll(\".field-cell\");\n\n    this.messageWin = document.querySelector(\".message-win\");\n    this.messageLose = document.querySelector(\".message-lose\");\n\n    this.assignDataAttributes();\n  }\n\n  assignDataAttributes() {\n    this.cells.forEach((cell, index) => {\n      const row = Math.floor(index / GRID_SIZE);\n      const col = index % GRID_SIZE;\n\n      cell.dataset.row = row;\n      cell.dataset.col = col;\n    });\n  }\n\n  moveUp() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (this.moveColumnUp(col)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (this.moveColumnDown(col)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveLeft() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.moveColumnLeft(row)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.moveColumnRight(row)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  getScore() {\n    return this.board.flat().reduce((acc, value) => acc + value, 0);\n  }\n\n  getState() {\n    return [...Array(GRID_SIZE)].map(() => Array(GRID_SIZE).fill(0));\n  }\n\n  getRandomTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      for (let col = 0; col < GRID_SIZE; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyTiles.length) {\n      const { row, col } =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      this.animateNewTile(row, col);\n\n      return { row, col, value: this.board[row][col] };\n    }\n\n    return null;\n  }\n\n  checkWin() {\n    return this.board.flat().includes(2048);\n  }\n\n  checkLose() {\n    for (let row = 0; row < GRID_SIZE; row++) {\n      for (let col = 0; col < GRID_SIZE; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        const checkCol =\n          col < GRID_SIZE - 1 &&\n          this.board[row][col] === this.board[row][col + 1];\n\n        const checkRow =\n          row < GRID_SIZE - 1 &&\n          this.board[row][col] === this.board[row + 1][col];\n\n        if (checkCol || checkRow) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getStatus() {\n    if (this.checkWin()) {\n      return \"win\";\n    }\n\n    if (this.checkLose()) {\n      return \"lose\";\n    }\n\n    return `playing`;\n  }\n\n  checkGameStatus() {\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === \"win\") {\n      this.messageWin.classList.remove(\"hidden\");\n      this.showWinMessage();\n      this.showConfetti();\n    } else if (gameStatus === \"lose\") {\n      this.messageLose.classList.remove(\"hidden\");\n      this.showGameOverMessage();\n    }\n  }\n\n  addCell() {\n    this.cells.forEach((cell, index) => {\n      const row = Math.floor(index / GRID_SIZE);\n      const col = index % GRID_SIZE;\n      const value = this.board[row][col];\n      const hasValue = value ? ` field-cell--${value}` : \"\";\n\n      cell.className = \"field-cell\" + hasValue;\n      cell.textContent = value || \"\";\n      this.animateAppear(row, col);\n    });\n  }\n\n  deleteCell() {\n    this.cells.forEach((cell) => {\n      cell.className = \"field-cell\";\n      cell.textContent = \"\";\n    });\n  }\n\n  start(element) {\n    this.gameActive = true;\n    this.score = 0;\n\n    element.classList.replace(\"start\", \"restart\");\n    element.textContent = \"Restart\";\n\n    this.getRandomTile();\n    this.getRandomTile();\n    this.addCell();\n    this.assignDataAttributes();\n  }\n\n  restart(element) {\n    this.gameActive = false;\n    this.score = 0;\n\n    const hasHiddenLose = this.messageLose.classList.contains(\"hidden\");\n    const hasHiddenWin = this.messageWin.classList.contains(\"hidden\");\n\n    if (!hasHiddenLose) {\n      this.messageLose.classList.add(\"hidden\");\n    }\n\n    if (!hasHiddenWin) {\n      this.messageWin.classList.add(\"hidden\");\n    }\n\n    element.classList.replace(\"restart\", \"start\");\n    element.textContent = \"Start\";\n\n    this.board = this.getState();\n    this.deleteCell();\n    this.assignDataAttributes();\n  }\n\n  moveColumnUp(col) {\n    let changed = false;\n    const compressedColumn = this.board\n      .map((row) => row[col])\n      .filter((value) => value !== 0);\n\n    for (let i = 0; i < compressedColumn.length - 1; i++) {\n      if (compressedColumn[i] === compressedColumn[i + 1]) {\n        compressedColumn[i] *= 2;\n        compressedColumn.splice(i + 1, 1);\n        this.score += compressedColumn[i];\n        this.animateMerge(i, col);\n        changed = true;\n      }\n    }\n\n    while (compressedColumn.length < GRID_SIZE) {\n      compressedColumn.push(0);\n    }\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.board[row][col] !== compressedColumn[row]) {\n        changed = true;\n      }\n      this.board[row][col] = compressedColumn[row];\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnDown(col) {\n    let changed = false;\n    const compressedColumn = this.board\n      .map((row) => row[col])\n      .filter((value) => value !== 0);\n\n    for (let i = compressedColumn.length - 1; i > 0; i--) {\n      if (compressedColumn[i] === compressedColumn[i - 1]) {\n        compressedColumn[i] *= 2;\n        compressedColumn.splice(i - 1, 1);\n        this.score += compressedColumn[i];\n        this.animateMerge(i, col);\n        changed = true;\n      }\n    }\n\n    while (compressedColumn.length < GRID_SIZE) {\n      compressedColumn.unshift(0);\n    }\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.board[row][col] !== compressedColumn[row]) {\n        changed = true;\n      }\n      this.board[row][col] = compressedColumn[row];\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnLeft(row) {\n    let changed = false;\n    const compressedRow = this.board[row].filter((value) => value !== 0);\n\n    for (let i = 0; i < compressedRow.length - 1; i++) {\n      if (compressedRow[i] === compressedRow[i + 1]) {\n        compressedRow[i] *= 2;\n        compressedRow.splice(i + 1, 1);\n        this.score += compressedRow[i];\n        this.animateMerge(row, i);\n        changed = true;\n      }\n    }\n\n    while (compressedRow.length < GRID_SIZE) {\n      compressedRow.push(0);\n    }\n\n    if (\n      this.board[row].some((value, index) => value !== compressedRow[index])\n    ) {\n      changed = true;\n    }\n\n    this.board[row] = compressedRow;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnRight(row) {\n    let changed = false;\n    const compressedRow = this.board[row].filter((value) => value !== 0);\n\n    for (let i = compressedRow.length - 1; i > 0; i--) {\n      if (compressedRow[i] === compressedRow[i - 1]) {\n        compressedRow[i] *= 2;\n        compressedRow.splice(i - 1, 1);\n        this.score += compressedRow[i];\n        this.animateMerge(row, i);\n        changed = true;\n      }\n    }\n\n    while (compressedRow.length < GRID_SIZE) {\n      compressedRow.unshift(0);\n    }\n\n    if (\n      this.board[row].some((value, index) => value !== compressedRow[index])\n    ) {\n      changed = true;\n    }\n\n    this.board[row] = compressedRow;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  animateNewTile(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`\n    );\n\n    if (cell) {\n      cell.classList.add(\"field-cell--new\");\n\n      setTimeout(() => {\n        cell.classList.remove(\"field-cell--new\");\n      }, 300);\n    }\n  }\n\n  animateAppear(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`\n    );\n\n    if (cell) {\n      cell.classList.add(\"field-cell--appear\");\n\n      setTimeout(() => {\n        cell.classList.remove(\"field-cell--appear\");\n      }, 200);\n    }\n  }\n\n  animateMerge(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`\n    );\n\n    if (cell) {\n      cell.classList.add(\"field-cell--merge\");\n\n      setTimeout(() => {\n        cell.classList.remove(\"field-cell--merge\");\n      }, 300);\n    }\n  }\n\n  animateMove(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`\n    );\n\n    if (cell) {\n      cell.classList.add(\"field-cell--move\");\n\n      setTimeout(() => {\n        cell.classList.remove(\"field-cell--move\");\n      }, 300);\n    }\n  }\n\n  showGameOverMessage() {\n    const gameOverOverlay = document.querySelector(\".game-over-overlay\");\n\n    gameOverOverlay.classList.remove(\"hidden\");\n    setTimeout(() => {\n      gameOverOverlay.classList.add(\"show\");\n    }, 10);\n\n    setTimeout(() => {\n      gameOverOverlay.classList.remove(\"show\");\n      setTimeout(() => {\n        gameOverOverlay.classList.add(\"hidden\");\n      }, 1000);\n    }, 3000);\n  }\n\n  showWinMessage() {\n    const winOverlay = document.querySelector(\".win-overlay\");\n\n    winOverlay.classList.remove(\"hidden\");\n    setTimeout(() => {\n      winOverlay.classList.add(\"show\");\n    }, 10);\n\n    setTimeout(() => {\n      winOverlay.classList.remove(\"show\");\n      setTimeout(() => {\n        winOverlay.classList.add(\"hidden\");\n      }, 1000);\n    }, 3000);\n  }\n\n  createConfetti = () => {\n    const confettiContainer = document.querySelector(\".confetti-container\");\n\n    const confetti = document.createElement(\"div\");\n    confetti.classList.add(\"confetti\");\n\n    confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;\n\n    confetti.style.left = `${Math.random() * 100}vw`;\n    confetti.style.animationDelay = `${Math.random()}s`;\n    confetti.style.animationDuration = `${Math.random() * 2 + 3}s`;\n\n    confettiContainer.appendChild(confetti);\n\n    setTimeout(() => {\n      confetti.remove();\n    }, 5000);\n  };\n\n  showConfetti() {\n    for (let i = 0; i < 100; i++) {\n      this.createConfetti();\n    }\n  }\n}\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","constructor","board","getState","score","gameActive","cells","document","querySelectorAll","messageWin","querySelector","messageLose","assignDataAttributes","forEach","cell","index","dataset","row","Math","floor","col","moveUp","changed","moveColumnUp","getRandomTile","addCell","checkGameStatus","moveDown","moveColumnDown","moveLeft","moveColumnLeft","moveRight","moveColumnRight","getScore","flat","reduce","acc","value","map","Array","fill","emptyTiles","push","length","random","animateNewTile","checkWin","includes","checkLose","checkCol","$a5fd07fa01589658$var$GRID_SIZE","checkRow","getStatus","gameStatus","classList","remove","showWinMessage","showConfetti","showGameOverMessage","hasValue","className","textContent","animateAppear","deleteCell","start","element","replace","restart","hasHiddenLose","contains","hasHiddenWin","add","compressedColumn","filter","i","splice","animateMerge","animateMove","unshift","compressedRow","some","setTimeout","gameOverOverlay","winOverlay","createConfetti","confettiContainer","confetti","createElement","style","backgroundColor","left","animationDelay","animationDuration","appendChild","addEventListener","game","gameStart","messageStart","setUpInputOnce","window","handleInput","once","setUpScore","event","key","confirm"],"version":3,"file":"index.a6b2cfe8.js.map"}